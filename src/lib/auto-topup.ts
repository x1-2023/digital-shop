// ==============================================================================
// Auto Topup Processor
// ==============================================================================
// Tự động xử lý nạp tiền khi phát hiện chuyển khoản từ bank API
// ==============================================================================

import { prisma } from './prisma';
import type { GenericTransaction } from './generic-bank-api';

// ==============================================================================
// Helper Functions
// ==============================================================================

/**
 * Extract topup code from transaction description
 * Supports format: NAP + userId (e.g., "NAP cm123456", "nap abc12345")
 *
 * This matches the format generated by generateTransferContent() in utils.ts
 */
function extractTopupCode(description: string): string | null {
  if (!description) return null;

  // Match pattern: NAP + userId (8 characters alphanumeric)
  // Example: "NAP cm123456", "nap abc12345", "Chuyen tien NAP cm123456 den tai khoan"
  const pattern = /\b(NAP|nap)\s+([a-z0-9]{8})\b/i;

  const match = description.match(pattern);
  if (match) {
    // Return the full matched code in format "NAP userId"
    // Example: "NAP cm123456"
    return `NAP ${match[2].toLowerCase()}`;
  }

  return null;
}

export interface AutoTopupResult {
  success: boolean;
  processed: number;
  failed: number;
  details: {
    transactionId: string;
    topupCode: string;
    amount: number;
    status: 'success' | 'failed' | 'duplicate' | 'invalid';
    message: string;
  }[];
}

// ==============================================================================
// Process Auto Topup
// ==============================================================================
export async function processAutoTopup(
  transactions: GenericTransaction[],
  bankName: string
): Promise<AutoTopupResult> {
  const result: AutoTopupResult = {
    success: true,
    processed: 0,
    failed: 0,
    details: [],
  };

  for (const transaction of transactions) {
    try {
      // Amount is already validated by GenericBankAPI (only credit, amount > 0)
      const creditAmount = transaction.amount;

      // Extract topup code from description
      const topupCode = extractTopupCode(transaction.description);
      if (!topupCode) {
        console.log(
          `[AutoTopup] No topup code found in: ${transaction.description}`
        );
        continue;
      }

      // Check if already processed
      const existing = await prisma.autoTopupLog.findUnique({
        where: { bankTransactionId: transaction.id },
      });

      if (existing) {
        result.details.push({
          transactionId: transaction.id,
          topupCode,
          amount: creditAmount,
          status: 'duplicate',
          message: 'Already processed',
        });
        continue;
      }

      // Find manual deposit request by topup code
      console.log(`[AutoTopup] Looking for topupCode: "${topupCode}"`);

      // Try to match with both formats: "NAP userId" and "NAPuserId"
      const topupCodeNoSpace = topupCode.replace(' ', ''); // "NAP98flsu2p"

      const depositRequest = await prisma.manualDepositRequest.findFirst({
        where: {
          OR: [
            { transferContent: { contains: topupCode } },           // "NAP 98flsu2p"
            { transferContent: { contains: topupCodeNoSpace } },    // "NAP98flsu2p"
          ],
          status: 'PENDING',
        },
        include: {
          user: true,
        },
      });

      if (!depositRequest) {
        // Try to find ALL pending requests to debug
        const allPending = await prisma.manualDepositRequest.findMany({
          where: { status: 'PENDING' },
          select: { id: true, transferContent: true, userId: true },
          take: 10,
        });

        console.log(`[AutoTopup] ❌ No match found for "${topupCode}"`);
        console.log(`[AutoTopup] Pending requests:`, allPending);

        // Log as invalid
        await prisma.autoTopupLog.create({
          data: {
            bankTransactionId: transaction.id,
            bankName,
            topupCode,
            amountVnd: creditAmount,
            description: transaction.description,
            status: 'INVALID',
            errorMessage: `No matching deposit request found. Searched for: "${topupCode}"`,
            transactionDate: transaction.date,
          },
        });

        result.details.push({
          transactionId: transaction.id,
          topupCode,
          amount: creditAmount,
          status: 'invalid',
          message: 'No matching deposit request',
        });
        result.failed++;
        continue;
      }

      // Calculate deposit bonus
      const { calculateDepositBonus } = await import('./deposit-bonus');
      const bonusCalc = await calculateDepositBonus(creditAmount);

      const totalCredit = bonusCalc.totalAmount;
      const bonusAmount = bonusCalc.bonusAmount;
      const bonusPercent = bonusCalc.bonusPercent;

      // Process topup in transaction
      await prisma.$transaction(async (tx) => {
        // 1. Update deposit request status
        await tx.manualDepositRequest.update({
          where: { id: depositRequest.id },
          data: {
            status: 'APPROVED',
            adminNote: `Auto-approved via ${bankName} API. TxID: ${transaction.id}${bonusAmount > 0 ? ` | Bonus: ${bonusPercent}% (+${bonusAmount.toLocaleString('vi-VN')} VND)` : ''}`,
          },
        });

        // 2. Credit wallet (with bonus)
        await tx.wallet.upsert({
          where: { userId: depositRequest.userId },
          create: {
            userId: depositRequest.userId,
            balanceVnd: totalCredit,
          },
          update: {
            balanceVnd: { increment: totalCredit },
          },
        });

        // 3. Create wallet transaction
        await tx.walletTransaction.create({
          data: {
            userId: depositRequest.userId,
            type: 'DEPOSIT',
            amountVnd: totalCredit,
            balanceAfterVnd: 0, // Will be updated
            description: `Auto topup - ${topupCode}${bonusAmount > 0 ? ` (Bonus: +${bonusPercent}%)` : ''}`,
            metadata: JSON.stringify({
              depositRequestId: depositRequest.id,
              bankTransactionId: transaction.id,
              bankName,
              bankDescription: transaction.description,
              originalAmount: creditAmount,
              bonusAmount: bonusAmount,
              bonusPercent: bonusPercent,
              totalAmount: totalCredit,
            }),
          },
        });

        // 4. Log successful auto topup
        await tx.autoTopupLog.create({
          data: {
            bankTransactionId: transaction.id,
            bankName,
            depositRequestId: depositRequest.id,
            userId: depositRequest.userId,
            topupCode,
            amountVnd: creditAmount,
            description: transaction.description,
            status: 'SUCCESS',
            transactionDate: transaction.date,
          },
        });
      });

      result.details.push({
        transactionId: transaction.id,
        topupCode,
        amount: creditAmount,
        status: 'success',
        message: `Credited ${totalCredit.toLocaleString('vi-VN')} VND to user ${depositRequest.user.email}${bonusAmount > 0 ? ` (Base: ${creditAmount.toLocaleString('vi-VN')}, Bonus: +${bonusPercent}% = +${bonusAmount.toLocaleString('vi-VN')})` : ''}`,
      });
      result.processed++;

      console.log(
        `[AutoTopup] ✅ Processed ${topupCode}: ${totalCredit.toLocaleString('vi-VN')} VND → ${depositRequest.user.email}${bonusAmount > 0 ? ` (Bonus: +${bonusPercent}%)` : ''}`
      );

      // Process referral rewards if this is the first deposit
      try {
        const { processReferralRewards } = await import('./referral');
        await processReferralRewards(depositRequest.userId, creditAmount);
      } catch (referralError) {
        console.error('[AutoTopup] Referral reward error:', referralError);
      }

      // Send Discord webhook notification (async, don't wait)
      try {
        const { sendDepositNotification, loadWebhookConfig } = await import('./discord-webhook');
        const webhookConfig = await loadWebhookConfig();

        if (webhookConfig.enabled && webhookConfig.notifyOnDeposits) {
          sendDepositNotification(webhookConfig, {
            userId: depositRequest.userId,
            userEmail: depositRequest.user.email,
            amount: creditAmount,
            status: 'APPROVED',
            method: 'AUTO',
          }).catch(err => console.error('[AutoTopup] Webhook error:', err));
        }
      } catch (webhookError) {
        console.error('[AutoTopup] Failed to send webhook notification:', webhookError);
      }
    } catch (error) {
      console.error('[AutoTopup] Error processing transaction:', error);
      result.failed++;
      result.details.push({
        transactionId: transaction.id,
        topupCode: extractTopupCode(transaction.description) || 'UNKNOWN',
        amount: transaction.amount,
        status: 'failed',
        message: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }

  return result;
}

// ==============================================================================
// Save last checked timestamp
// ==============================================================================
export async function updateLastChecked() {
  await prisma.websiteSettings.upsert({
    where: { key: 'bank_api_last_checked' },
    create: {
      key: 'bank_api_last_checked',
      value: new Date().toISOString(),
    },
    update: {
      value: new Date().toISOString(),
    },
  });
}

// ==============================================================================
// Process All Banks - Wrapper for Cron Job
// ==============================================================================
/**
 * Main function called by cron job
 * Fetches bank configs, gets transactions, and processes auto-topup
 */
export async function processAllBanks(): Promise<AutoTopupResult> {
  const { GenericBankAPI, loadBankConfigs } = await import('./generic-bank-api');

  const aggregatedResult: AutoTopupResult = {
    success: true,
    processed: 0,
    failed: 0,
    details: [],
  };

  try {
    // Load bank configs from websiteSettings table
    const configs = await loadBankConfigs();

    if (!Array.isArray(configs) || configs.length === 0) {
      console.log('[AutoTopup] No bank configs found');
      return aggregatedResult;
    }

    // Filter enabled configs
    const enabledConfigs = configs.filter((c: any) => c.enabled);

    if (enabledConfigs.length === 0) {
      console.log('[AutoTopup] No enabled bank configs found');
      return aggregatedResult;
    }

    console.log(`[AutoTopup] Processing ${enabledConfigs.length} bank(s)`);

    // Process each bank
    for (const config of enabledConfigs) {
      try {
        console.log(`[AutoTopup] Fetching from ${config.name}...`);

        const api = new GenericBankAPI(config);
        const transactions = await api.fetchTransactions();

        // Validate transactions is array
        if (!Array.isArray(transactions)) {
          console.error(`[AutoTopup] Invalid transactions from ${config.name}:`, transactions);
          continue;
        }

        console.log(`[AutoTopup] Found ${transactions.length} transaction(s) from ${config.name}`);

        if (transactions.length > 0) {
          const result = await processAutoTopup(transactions, config.name);

          // Aggregate results
          aggregatedResult.processed += result.processed;
          aggregatedResult.failed += result.failed;
          aggregatedResult.details.push(...result.details);

          if (!result.success) {
            aggregatedResult.success = false;
          }
        }
      } catch (error) {
        console.error(`[AutoTopup] Error processing ${config.name}:`, error);
        aggregatedResult.success = false;
        aggregatedResult.failed++;
      }
    }

    // Update last checked timestamp
    await updateLastChecked();

    console.log(`[AutoTopup] Summary: Processed=${aggregatedResult.processed}, Failed=${aggregatedResult.failed}`);

    return aggregatedResult;
  } catch (error) {
    console.error('[AutoTopup] Fatal error:', error);
    aggregatedResult.success = false;
    throw error;
  }
}
