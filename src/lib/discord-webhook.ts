// ==============================================================================
// Discord Webhook Service
// ==============================================================================
// Send notifications to Discord channel via webhook
// ==============================================================================

export interface DiscordWebhookConfig {
  enabled: boolean;
  webhookUrl: string;
  notifyOnOrders: boolean;
  notifyOnDeposits: boolean;
}

export interface OrderNotification {
  orderId: string;
  userEmail: string;
  totalAmount: number;
  currency: string;
  items: Array<{
    productName: string;
    quantity: number;
    price: number;
  }>;
}

export interface DepositNotification {
  userId: string;
  userEmail: string;
  amount: number;
  status: 'APPROVED' | 'REJECTED';
  method: 'AUTO' | 'MANUAL';
}

export interface ReferralNotification {
  referrerEmail: string;
  refereeEmail: string;
  referrerRewardVnd: number;
  refereeRewardVnd: number;
  firstDepositVnd: number;
}

/**
 * Send order notification to Discord
 */
export async function sendOrderNotification(
  config: DiscordWebhookConfig,
  order: OrderNotification
): Promise<boolean> {
  if (!config.enabled || !config.notifyOnOrders || !config.webhookUrl) {
    return false;
  }

  try {
    const itemsList = order.items
      .map(item => `‚Ä¢ ${item.productName} x${item.quantity} - ${formatCurrency(item.price * item.quantity)}`)
      .join('\n');

    const embed = {
      title: 'üõí ƒê∆°n H√†ng M·ªõi',
      color: 0x00ff00, // Green
      fields: [
        {
          name: 'M√£ ƒê∆°n',
          value: `\`${order.orderId}\``,
          inline: true,
        },
        {
          name: 'Kh√°ch H√†ng',
          value: order.userEmail,
          inline: true,
        },
        {
          name: 'T·ªïng Ti·ªÅn',
          value: `**${formatCurrency(order.totalAmount)}**`,
          inline: true,
        },
        {
          name: 'S·∫£n Ph·∫©m',
          value: itemsList || 'Kh√¥ng c√≥ s·∫£n ph·∫©m',
          inline: false,
        },
      ],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Digital Shop',
      },
    };

    const response = await fetch(config.webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        embeds: [embed],
      }),
    });

    if (!response.ok) {
      console.error('Discord webhook error:', await response.text());
      return false;
    }

    return true;
  } catch (error) {
    console.error('Failed to send Discord order notification:', error);
    return false;
  }
}

/**
 * Send deposit notification to Discord
 */
export async function sendDepositNotification(
  config: DiscordWebhookConfig,
  deposit: DepositNotification
): Promise<boolean> {
  if (!config.enabled || !config.notifyOnDeposits || !config.webhookUrl) {
    return false;
  }

  try {
    const isApproved = deposit.status === 'APPROVED';
    const color = isApproved ? 0x00ff00 : 0xff0000; // Green for approved, red for rejected
    const icon = isApproved ? '‚úÖ' : '‚ùå';
    const statusText = isApproved ? 'ƒê√£ Duy·ªát' : 'T·ª´ Ch·ªëi';
    const methodText = deposit.method === 'AUTO' ? 'T·ª± ƒë·ªông' : 'Th·ªß c√¥ng';

    const embed = {
      title: `${icon} N·∫°p Ti·ªÅn ${statusText}`,
      color,
      fields: [
        {
          name: 'Kh√°ch H√†ng',
          value: deposit.userEmail,
          inline: true,
        },
        {
          name: 'S·ªë Ti·ªÅn',
          value: `**${formatCurrency(deposit.amount)}**`,
          inline: true,
        },
        {
          name: 'Ph∆∞∆°ng Th·ª©c',
          value: methodText,
          inline: true,
        },
        {
          name: 'Tr·∫°ng Th√°i',
          value: statusText,
          inline: true,
        },
      ],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Digital Shop',
      },
    };

    const response = await fetch(config.webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        embeds: [embed],
      }),
    });

    if (!response.ok) {
      console.error('Discord webhook error:', await response.text());
      return false;
    }

    return true;
  } catch (error) {
    console.error('Failed to send Discord deposit notification:', error);
    return false;
  }
}

/**
 * Send referral notification to Discord
 */
export async function sendReferralNotification(
  config: DiscordWebhookConfig,
  data: ReferralNotification
): Promise<boolean> {
  if (!config.enabled || !config.webhookUrl) {
    return false;
  }

  try {
    const embed = {
      title: 'üéÅ Gi·ªõi Thi·ªáu Th√†nh C√¥ng',
      color: 0xff00ff, // Purple
      fields: [
        {
          name: 'Ng∆∞·ªùi Gi·ªõi Thi·ªáu',
          value: `${data.referrerEmail}\nüí∞ Th∆∞·ªüng: **${formatCurrency(data.referrerRewardVnd)}**`,
          inline: true,
        },
        {
          name: 'Ng∆∞·ªùi ƒê∆∞·ª£c Gi·ªõi Thi·ªáu',
          value: `${data.refereeEmail}\nüí∞ Th∆∞·ªüng: **${formatCurrency(data.refereeRewardVnd)}**`,
          inline: true,
        },
        {
          name: 'N·∫°p Ti·ªÅn ƒê·∫ßu Ti√™n',
          value: formatCurrency(data.firstDepositVnd),
          inline: false,
        },
      ],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Digital Shop - Referral System',
      },
    };

    const response = await fetch(config.webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        embeds: [embed],
      }),
    });

    if (!response.ok) {
      console.error('Discord webhook error:', await response.text());
      return false;
    }

    return true;
  } catch (error) {
    console.error('Failed to send Discord referral notification:', error);
    return false;
  }
}

/**
 * Test Discord webhook connection
 */
export async function testDiscordWebhook(webhookUrl: string): Promise<{
  success: boolean;
  message: string;
}> {
  try {
    if (!webhookUrl || !webhookUrl.startsWith('https://discord.com/api/webhooks/')) {
      return {
        success: false,
        message: 'URL webhook kh√¥ng h·ª£p l·ªá. Ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi https://discord.com/api/webhooks/',
      };
    }

    const embed = {
      title: 'üß™ Test Webhook',
      description: 'ƒê√¢y l√† tin nh·∫Øn test t·ª´ Digital Shop',
      color: 0x3b82f6, // Blue
      fields: [
        {
          name: 'Status',
          value: '‚úÖ Webhook ho·∫°t ƒë·ªông t·ªët!',
          inline: false,
        },
      ],
      timestamp: new Date().toISOString(),
      footer: {
        text: 'Digital Shop - Test Message',
      },
    };

    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        embeds: [embed],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      return {
        success: false,
        message: `L·ªói: ${response.status} - ${errorText}`,
      };
    }

    return {
      success: true,
      message: 'Webhook ho·∫°t ƒë·ªông! Ki·ªÉm tra Discord channel c·ªßa b·∫°n.',
    };
  } catch (error) {
    return {
      success: false,
      message: error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
    };
  }
}

/**
 * Load webhook config from database
 */
export async function loadWebhookConfig(): Promise<DiscordWebhookConfig> {
  try {
    const { prisma } = await import('./prisma');

    const setting = await prisma.websiteSettings.findUnique({
      where: { key: 'discord_webhook' },
    });

    if (!setting?.value) {
      return {
        enabled: false,
        webhookUrl: '',
        notifyOnOrders: true,
        notifyOnDeposits: true,
      };
    }

    return JSON.parse(setting.value as string);
  } catch (error) {
    console.error('Failed to load webhook config:', error);
    return {
      enabled: false,
      webhookUrl: '',
      notifyOnOrders: true,
      notifyOnDeposits: true,
    };
  }
}

/**
 * Save webhook config to database
 */
export async function saveWebhookConfig(config: DiscordWebhookConfig): Promise<void> {
  const { prisma } = await import('./prisma');

  await prisma.websiteSettings.upsert({
    where: { key: 'discord_webhook' },
    create: {
      key: 'discord_webhook',
      value: JSON.stringify(config),
    },
    update: {
      value: JSON.stringify(config),
    },
  });
}

// Helper function
function formatCurrency(amount: number): string {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(amount);
}
